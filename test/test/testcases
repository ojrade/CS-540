test_cases/load_and_center_dataset1.txt 5 python3 -c import pca; print(pca.load_and_center_dataset('YaleB_32x32.mat'))
test_cases/load_and_center_dataset2.txt 5 python3 -c import pca; print(type(pca.load_and_center_dataset('YaleB_32x32.mat')))
test_cases/load_and_center_dataset3.txt 10 python3 -c import math; import numpy as np; import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); print(abs(np.mean(x,axis=0))<0.0000021); print(abs(np.average(x))<0.00000035)
test_cases/get_covariance1.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); print(pca.get_covariance(x))
test_cases/get_covariance2.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); print(pca.get_covariance(x[0]))
test_cases/get_covariance3.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); print(pca.get_covariance(x[500]))
test_cases/get_covariance4.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); print(pca.get_covariance(x[1000]))
test_cases/get_covariance5.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); print(pca.get_covariance(x[2100]))
test_cases/get_eig1.txt 1 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); print(pca.get_eig(c,2))
test_cases/get_eig2.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); print(pca.get_eig(c,4))
test_cases/get_eig3.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); print(pca.get_eig(c,6))
test_cases/get_eig4.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,2); print(Lambda)
test_cases/get_eig5.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,2); print(U)
test_cases/get_eig6.txt 4 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,4); print(Lambda)
test_cases/get_eig7.txt 4 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,4); print(U)
test_cases/get_eig8.txt 4 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,6); print(Lambda)
test_cases/get_eig9.txt 4 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,6); print(U)
test_cases/project_image1.txt 1 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,2); print(pca.project_image(x[0],U))
test_cases/project_image2.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,2); print(pca.project_image(x[200],U))
test_cases/project_image3.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,2); print(pca.project_image(x[2301],U))
test_cases/project_image4.txt 1 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,4); print(pca.project_image(x[0],U))
test_cases/project_image5.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,4); print(pca.project_image(x[200],U))
test_cases/project_image6.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,4); print(pca.project_image(x[2301],U))
test_cases/displayimage.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,2); projection = pca.project_image(x[0],U); pca.display_image(x[0],projection)
test_cases/displayimage2.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,4); projection = pca.project_image(x[200],U); pca.display_image(x[200],projection)
test_cases/displayimage3.txt 2 python3 -c import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,6); projection = pca.project_image(x[400],U); pca.display_image(x[400],projection)
test_cases/displayimage4.txt 2 python3 -c import numpy as np; import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,4); projection = pca.project_image(x[1996],U); pca.display_image(x[1996],projection)
test_cases/displayimage5.txt 2 python3 -c import numpy as np; import pca; x = pca.load_and_center_dataset('YaleB_32x32.mat'); c = pca.get_covariance(x); Lambda, U = pca.get_eig(c,6); projection = pca.project_image(x[2000],U); pca.display_image(np.transpose(U)[0], np.transpose(U)[1])
test_cases/displayimage_formattedplot.txt 10 refer to rubrics in this file and perform manual grading.
test_cases/submittedorigandproj.txt 10 refer to rubrics in this file and perform manual grading.
test_cases/submitteddifferwriteup.txt 5 refer to rubrics in this file and perform manual grading.